# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:23:41+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class ActivationOverrideBehavior(Enum):
    DISTRIBUTED_GRANTS_ONLY = 'DISTRIBUTED_GRANTS_ONLY'
    ALL_GRANTS_PERMITTED_BY_ISSUER = 'ALL_GRANTS_PERMITTED_BY_ISSUER'


class AllowedOperation(Enum):
    CreateGrant = 'CreateGrant'
    CheckoutLicense = 'CheckoutLicense'
    CheckoutBorrowLicense = 'CheckoutBorrowLicense'
    CheckInLicense = 'CheckInLicense'
    ExtendConsumptionLicense = 'ExtendConsumptionLicense'
    ListPurchasedLicenses = 'ListPurchasedLicenses'
    CreateToken = 'CreateToken'


class AllowedOperationList(RootModel[List[AllowedOperation]]):
    root: List[AllowedOperation] = Field(..., max_length=7, min_length=1)


class Arn(
    RootModel[
        constr(
            pattern=r'^arn:aws(-(cn|us-gov|iso-b|iso-c|iso-d))?:[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}$',
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws(-(cn|us-gov|iso-b|iso-c|iso-d))?:[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}$',
        max_length=2048,
    )


class ArnList(RootModel[List[Arn]]):
    root: List[Arn]


class AuthorizationException(RootModel[Any]):
    root: Any


class Boolean(RootModel[bool]):
    root: bool


class BoxBoolean(RootModel[bool]):
    root: bool


class BoxInteger(RootModel[int]):
    root: int


class BoxLong(RootModel[int]):
    root: int


class CheckInLicenseResponse(BaseModel):
    pass


class CheckoutType(Enum):
    PROVISIONAL = 'PROVISIONAL'
    PERPETUAL = 'PERPETUAL'


class ClientRequestToken(RootModel[constr(min_length=1, max_length=36)]):
    root: constr(min_length=1, max_length=36)


class ClientToken(RootModel[constr(pattern=r'\S+', max_length=2048)]):
    root: constr(pattern=r'\S+', max_length=2048)


class ConflictException(RootModel[Any]):
    root: Any


class DateTime(RootModel[datetime]):
    root: datetime


class DeleteLicenseConfigurationResponse(BaseModel):
    pass


class DeleteLicenseManagerReportGeneratorResponse(BaseModel):
    pass


class DeleteTokenResponse(BaseModel):
    pass


class DigitalSignatureMethod(Enum):
    JWT_PS384 = 'JWT_PS384'


class EntitlementDataUnit(Enum):
    Count = 'Count'
    None_ = 'None'
    Seconds = 'Seconds'
    Microseconds = 'Microseconds'
    Milliseconds = 'Milliseconds'
    Bytes = 'Bytes'
    Kilobytes = 'Kilobytes'
    Megabytes = 'Megabytes'
    Gigabytes = 'Gigabytes'
    Terabytes = 'Terabytes'
    Bits = 'Bits'
    Kilobits = 'Kilobits'
    Megabits = 'Megabits'
    Gigabits = 'Gigabits'
    Terabits = 'Terabits'
    Percent = 'Percent'
    Bytes_Second = 'Bytes/Second'
    Kilobytes_Second = 'Kilobytes/Second'
    Megabytes_Second = 'Megabytes/Second'
    Gigabytes_Second = 'Gigabytes/Second'
    Terabytes_Second = 'Terabytes/Second'
    Bits_Second = 'Bits/Second'
    Kilobits_Second = 'Kilobits/Second'
    Megabits_Second = 'Megabits/Second'
    Gigabits_Second = 'Gigabits/Second'
    Terabits_Second = 'Terabits/Second'
    Count_Second = 'Count/Second'


class EntitlementNotAllowedException(RootModel[Any]):
    root: Any


class EntitlementUnit(Enum):
    Count = 'Count'
    None_ = 'None'
    Seconds = 'Seconds'
    Microseconds = 'Microseconds'
    Milliseconds = 'Milliseconds'
    Bytes = 'Bytes'
    Kilobytes = 'Kilobytes'
    Megabytes = 'Megabytes'
    Gigabytes = 'Gigabytes'
    Terabytes = 'Terabytes'
    Bits = 'Bits'
    Kilobits = 'Kilobits'
    Megabits = 'Megabits'
    Gigabits = 'Gigabits'
    Terabits = 'Terabits'
    Percent = 'Percent'
    Bytes_Second = 'Bytes/Second'
    Kilobytes_Second = 'Kilobytes/Second'
    Megabytes_Second = 'Megabytes/Second'
    Gigabytes_Second = 'Gigabytes/Second'
    Terabytes_Second = 'Terabytes/Second'
    Bits_Second = 'Bits/Second'
    Kilobits_Second = 'Kilobits/Second'
    Megabits_Second = 'Megabits/Second'
    Gigabits_Second = 'Gigabits/Second'
    Terabits_Second = 'Terabits/Second'
    Count_Second = 'Count/Second'


class FailedDependencyException(RootModel[Any]):
    root: Any


class FilterLimitExceededException(RootModel[Any]):
    root: Any


class FilterName(RootModel[str]):
    root: str


class FilterValue(RootModel[str]):
    root: str


class FilterValues(RootModel[List[FilterValue]]):
    root: List[FilterValue]


class GetLicenseUsageRequest(BaseModel):
    LicenseArn: Arn


class GetServiceSettingsRequest(BaseModel):
    pass


class GrantStatus(Enum):
    PENDING_WORKFLOW = 'PENDING_WORKFLOW'
    PENDING_ACCEPT = 'PENDING_ACCEPT'
    REJECTED = 'REJECTED'
    ACTIVE = 'ACTIVE'
    FAILED_WORKFLOW = 'FAILED_WORKFLOW'
    DELETED = 'DELETED'
    PENDING_DELETE = 'PENDING_DELETE'
    DISABLED = 'DISABLED'
    WORKFLOW_COMPLETED = 'WORKFLOW_COMPLETED'


class ISO8601DateTime(
    RootModel[
        constr(
            pattern=r'^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[0-1]|0[1-9]|[1-2][0-9])T(2[0-3]|[0-1][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]+)?(Z|[+-](?:2[ 0-3]|[0-1][0-9]):[0-5][0-9])+$',
            max_length=50,
        )
    ]
):
    root: constr(
        pattern=r'^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[0-1]|0[1-9]|[1-2][0-9])T(2[0-3]|[0-1][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]+)?(Z|[+-](?:2[ 0-3]|[0-1][0-9]):[0-5][0-9])+$',
        max_length=50,
    )


class Integer(RootModel[int]):
    root: int


class InvalidParameterValueException(RootModel[Any]):
    root: Any


class InvalidResourceStateException(RootModel[Any]):
    root: Any


class InventoryFilterCondition(Enum):
    EQUALS = 'EQUALS'
    NOT_EQUALS = 'NOT_EQUALS'
    BEGINS_WITH = 'BEGINS_WITH'
    CONTAINS = 'CONTAINS'


class LicenseConfigurationStatus(Enum):
    AVAILABLE = 'AVAILABLE'
    DISABLED = 'DISABLED'


class LicenseConversionTaskId(
    RootModel[constr(pattern=r'^lct-[a-zA-Z0-9]*', max_length=50)]
):
    root: constr(pattern=r'^lct-[a-zA-Z0-9]*', max_length=50)


class LicenseConversionTaskStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


class LicenseCountingType(Enum):
    vCPU = 'vCPU'
    Instance = 'Instance'
    Core = 'Core'
    Socket = 'Socket'


class LicenseDeletionStatus(Enum):
    PENDING_DELETE = 'PENDING_DELETE'
    DELETED = 'DELETED'


class LicenseStatus(Enum):
    AVAILABLE = 'AVAILABLE'
    PENDING_AVAILABLE = 'PENDING_AVAILABLE'
    DEACTIVATED = 'DEACTIVATED'
    SUSPENDED = 'SUSPENDED'
    EXPIRED = 'EXPIRED'
    PENDING_DELETE = 'PENDING_DELETE'
    DELETED = 'DELETED'


class LicenseUsageException(RootModel[Any]):
    root: Any


class Long(RootModel[int]):
    root: int


class MaxSize100(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class NoEntitlementsAllowedException(RootModel[Any]):
    root: Any


class Options(BaseModel):
    ActivationOverrideBehavior_1: Optional[ActivationOverrideBehavior] = Field(
        None, alias='ActivationOverrideBehavior'
    )


class OrganizationConfiguration(BaseModel):
    EnableIntegration: Boolean


class PrincipalArnList(RootModel[List[Arn]]):
    root: List[Arn] = Field(..., max_length=1, min_length=1)


class ProvisionalConfiguration(BaseModel):
    MaxTimeToLiveInMinutes: BoxInteger


class RateLimitExceededException(RootModel[Any]):
    root: Any


class ReceivedStatus(Enum):
    PENDING_WORKFLOW = 'PENDING_WORKFLOW'
    PENDING_ACCEPT = 'PENDING_ACCEPT'
    REJECTED = 'REJECTED'
    ACTIVE = 'ACTIVE'
    FAILED_WORKFLOW = 'FAILED_WORKFLOW'
    DELETED = 'DELETED'
    DISABLED = 'DISABLED'
    WORKFLOW_COMPLETED = 'WORKFLOW_COMPLETED'


class RedirectException(RootModel[Any]):
    root: Any


class RejectGrantRequest(BaseModel):
    GrantArn: Arn


class RenewType(Enum):
    None_ = 'None'
    Weekly = 'Weekly'
    Monthly = 'Monthly'


class ReportContext(BaseModel):
    licenseConfigurationArns: ArnList


class ReportFrequencyType(Enum):
    DAY = 'DAY'
    WEEK = 'WEEK'
    MONTH = 'MONTH'


class ReportGeneratorName(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class ReportType(Enum):
    LicenseConfigurationSummaryReport = 'LicenseConfigurationSummaryReport'
    LicenseConfigurationUsageReport = 'LicenseConfigurationUsageReport'


class ReportTypeList(RootModel[List[ReportType]]):
    root: List[ReportType]


class ResourceLimitExceededException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceType(Enum):
    EC2_INSTANCE = 'EC2_INSTANCE'
    EC2_HOST = 'EC2_HOST'
    EC2_AMI = 'EC2_AMI'
    RDS = 'RDS'
    SYSTEMS_MANAGER_MANAGED_INSTANCE = 'SYSTEMS_MANAGER_MANAGED_INSTANCE'


class ServerInternalException(RootModel[Any]):
    root: Any


class SignedToken(RootModel[constr(min_length=4096)]):
    root: constr(min_length=4096)


class StatusReasonMessage(RootModel[constr(pattern=r'[\s\S]+', max_length=400)]):
    root: constr(pattern=r'[\s\S]+', max_length=400)


class String(RootModel[str]):
    root: str


class StringList(RootModel[List[String]]):
    root: List[String]


class Tag(BaseModel):
    Key: Optional[String] = None
    Value: Optional[String] = None


class TagKeyList(RootModel[List[String]]):
    root: List[String]


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class TagResourceRequest(BaseModel):
    ResourceArn: String
    Tags: TagList


class TagResourceResponse(BaseModel):
    pass


class TokenString(RootModel[constr(pattern=r'\S+', max_length=4096)]):
    root: constr(pattern=r'\S+', max_length=4096)


class TokenType(Enum):
    REFRESH_TOKEN = 'REFRESH_TOKEN'


class UnsupportedDigitalSignatureMethodException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    ResourceArn: String
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateLicenseConfigurationResponse(BaseModel):
    pass


class UpdateLicenseManagerReportGeneratorResponse(BaseModel):
    pass


class UpdateLicenseSpecificationsForResourceResponse(BaseModel):
    pass


class UpdateServiceSettingsRequest(BaseModel):
    EnableCrossAccountsDiscovery: Optional[BoxBoolean] = None
    OrganizationConfiguration_1: Optional[OrganizationConfiguration] = Field(
        None, alias='OrganizationConfiguration'
    )
    S3BucketArn: Optional[String] = None
    SnsTopicArn: Optional[String] = None


class UpdateServiceSettingsResponse(BaseModel):
    pass


class UsageOperation(RootModel[constr(max_length=50)]):
    root: constr(max_length=50)


class ValidationException(RootModel[Any]):
    root: Any


class XAmzTarget(Enum):
    AWSLicenseManager_AcceptGrant = 'AWSLicenseManager.AcceptGrant'


class XAmzTarget1(Enum):
    AWSLicenseManager_CheckInLicense = 'AWSLicenseManager.CheckInLicense'


class XAmzTarget2(Enum):
    AWSLicenseManager_CheckoutBorrowLicense = 'AWSLicenseManager.CheckoutBorrowLicense'


class XAmzTarget3(Enum):
    AWSLicenseManager_CheckoutLicense = 'AWSLicenseManager.CheckoutLicense'


class XAmzTarget4(Enum):
    AWSLicenseManager_CreateGrant = 'AWSLicenseManager.CreateGrant'


class XAmzTarget5(Enum):
    AWSLicenseManager_CreateGrantVersion = 'AWSLicenseManager.CreateGrantVersion'


class XAmzTarget6(Enum):
    AWSLicenseManager_CreateLicense = 'AWSLicenseManager.CreateLicense'


class XAmzTarget7(Enum):
    AWSLicenseManager_CreateLicenseConfiguration = (
        'AWSLicenseManager.CreateLicenseConfiguration'
    )


class XAmzTarget8(Enum):
    AWSLicenseManager_CreateLicenseConversionTaskForResource = (
        'AWSLicenseManager.CreateLicenseConversionTaskForResource'
    )


class XAmzTarget9(Enum):
    AWSLicenseManager_CreateLicenseManagerReportGenerator = (
        'AWSLicenseManager.CreateLicenseManagerReportGenerator'
    )


class XAmzTarget10(Enum):
    AWSLicenseManager_CreateLicenseVersion = 'AWSLicenseManager.CreateLicenseVersion'


class XAmzTarget11(Enum):
    AWSLicenseManager_CreateToken = 'AWSLicenseManager.CreateToken'


class XAmzTarget12(Enum):
    AWSLicenseManager_DeleteGrant = 'AWSLicenseManager.DeleteGrant'


class XAmzTarget13(Enum):
    AWSLicenseManager_DeleteLicense = 'AWSLicenseManager.DeleteLicense'


class XAmzTarget14(Enum):
    AWSLicenseManager_DeleteLicenseConfiguration = (
        'AWSLicenseManager.DeleteLicenseConfiguration'
    )


class XAmzTarget15(Enum):
    AWSLicenseManager_DeleteLicenseManagerReportGenerator = (
        'AWSLicenseManager.DeleteLicenseManagerReportGenerator'
    )


class XAmzTarget16(Enum):
    AWSLicenseManager_DeleteToken = 'AWSLicenseManager.DeleteToken'


class XAmzTarget17(Enum):
    AWSLicenseManager_ExtendLicenseConsumption = (
        'AWSLicenseManager.ExtendLicenseConsumption'
    )


class XAmzTarget18(Enum):
    AWSLicenseManager_GetAccessToken = 'AWSLicenseManager.GetAccessToken'


class XAmzTarget19(Enum):
    AWSLicenseManager_GetGrant = 'AWSLicenseManager.GetGrant'


class XAmzTarget20(Enum):
    AWSLicenseManager_GetLicense = 'AWSLicenseManager.GetLicense'


class XAmzTarget21(Enum):
    AWSLicenseManager_GetLicenseConfiguration = (
        'AWSLicenseManager.GetLicenseConfiguration'
    )


class XAmzTarget22(Enum):
    AWSLicenseManager_GetLicenseConversionTask = (
        'AWSLicenseManager.GetLicenseConversionTask'
    )


class XAmzTarget23(Enum):
    AWSLicenseManager_GetLicenseManagerReportGenerator = (
        'AWSLicenseManager.GetLicenseManagerReportGenerator'
    )


class XAmzTarget24(Enum):
    AWSLicenseManager_GetLicenseUsage = 'AWSLicenseManager.GetLicenseUsage'


class XAmzTarget25(Enum):
    AWSLicenseManager_GetServiceSettings = 'AWSLicenseManager.GetServiceSettings'


class XAmzTarget26(Enum):
    AWSLicenseManager_ListAssociationsForLicenseConfiguration = (
        'AWSLicenseManager.ListAssociationsForLicenseConfiguration'
    )


class XAmzTarget27(Enum):
    AWSLicenseManager_ListDistributedGrants = 'AWSLicenseManager.ListDistributedGrants'


class XAmzTarget28(Enum):
    AWSLicenseManager_ListFailuresForLicenseConfigurationOperations = (
        'AWSLicenseManager.ListFailuresForLicenseConfigurationOperations'
    )


class XAmzTarget29(Enum):
    AWSLicenseManager_ListLicenseConfigurations = (
        'AWSLicenseManager.ListLicenseConfigurations'
    )


class XAmzTarget30(Enum):
    AWSLicenseManager_ListLicenseConversionTasks = (
        'AWSLicenseManager.ListLicenseConversionTasks'
    )


class XAmzTarget31(Enum):
    AWSLicenseManager_ListLicenseManagerReportGenerators = (
        'AWSLicenseManager.ListLicenseManagerReportGenerators'
    )


class XAmzTarget32(Enum):
    AWSLicenseManager_ListLicenseSpecificationsForResource = (
        'AWSLicenseManager.ListLicenseSpecificationsForResource'
    )


class XAmzTarget33(Enum):
    AWSLicenseManager_ListLicenseVersions = 'AWSLicenseManager.ListLicenseVersions'


class XAmzTarget34(Enum):
    AWSLicenseManager_ListLicenses = 'AWSLicenseManager.ListLicenses'


class XAmzTarget35(Enum):
    AWSLicenseManager_ListReceivedGrants = 'AWSLicenseManager.ListReceivedGrants'


class XAmzTarget36(Enum):
    AWSLicenseManager_ListReceivedGrantsForOrganization = (
        'AWSLicenseManager.ListReceivedGrantsForOrganization'
    )


class XAmzTarget37(Enum):
    AWSLicenseManager_ListReceivedLicenses = 'AWSLicenseManager.ListReceivedLicenses'


class XAmzTarget38(Enum):
    AWSLicenseManager_ListReceivedLicensesForOrganization = (
        'AWSLicenseManager.ListReceivedLicensesForOrganization'
    )


class XAmzTarget39(Enum):
    AWSLicenseManager_ListResourceInventory = 'AWSLicenseManager.ListResourceInventory'


class XAmzTarget40(Enum):
    AWSLicenseManager_ListTagsForResource = 'AWSLicenseManager.ListTagsForResource'


class XAmzTarget41(Enum):
    AWSLicenseManager_ListTokens = 'AWSLicenseManager.ListTokens'


class XAmzTarget42(Enum):
    AWSLicenseManager_ListUsageForLicenseConfiguration = (
        'AWSLicenseManager.ListUsageForLicenseConfiguration'
    )


class XAmzTarget43(Enum):
    AWSLicenseManager_RejectGrant = 'AWSLicenseManager.RejectGrant'


class XAmzTarget44(Enum):
    AWSLicenseManager_TagResource = 'AWSLicenseManager.TagResource'


class XAmzTarget45(Enum):
    AWSLicenseManager_UntagResource = 'AWSLicenseManager.UntagResource'


class XAmzTarget46(Enum):
    AWSLicenseManager_UpdateLicenseConfiguration = (
        'AWSLicenseManager.UpdateLicenseConfiguration'
    )


class XAmzTarget47(Enum):
    AWSLicenseManager_UpdateLicenseManagerReportGenerator = (
        'AWSLicenseManager.UpdateLicenseManagerReportGenerator'
    )


class XAmzTarget48(Enum):
    AWSLicenseManager_UpdateLicenseSpecificationsForResource = (
        'AWSLicenseManager.UpdateLicenseSpecificationsForResource'
    )


class XAmzTarget49(Enum):
    AWSLicenseManager_UpdateServiceSettings = 'AWSLicenseManager.UpdateServiceSettings'


class AcceptGrantRequest(BaseModel):
    GrantArn: Arn


class AcceptGrantResponse(BaseModel):
    GrantArn: Optional[Arn] = None
    Status: Optional[GrantStatus] = None
    Version: Optional[String] = None


class AutomatedDiscoveryInformation(BaseModel):
    LastRunTime: Optional[DateTime] = None


class BorrowConfiguration(BaseModel):
    AllowEarlyCheckIn: BoxBoolean
    MaxTimeToLiveInMinutes: BoxInteger


class CheckInLicenseRequest(BaseModel):
    Beneficiary: Optional[String] = None
    LicenseConsumptionToken: String


class ConsumedLicenseSummary(BaseModel):
    ConsumedLicenses: Optional[BoxLong] = None
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')


class ConsumedLicenseSummaryList(RootModel[List[ConsumedLicenseSummary]]):
    root: List[ConsumedLicenseSummary]


class ConsumptionConfiguration(BaseModel):
    BorrowConfiguration_1: Optional[BorrowConfiguration] = Field(
        None, alias='BorrowConfiguration'
    )
    ProvisionalConfiguration_1: Optional[ProvisionalConfiguration] = Field(
        None, alias='ProvisionalConfiguration'
    )
    RenewType_1: Optional[RenewType] = Field(None, alias='RenewType')


class CreateGrantRequest(BaseModel):
    AllowedOperations: AllowedOperationList
    ClientToken_1: ClientToken = Field(..., alias='ClientToken')
    GrantName: String
    HomeRegion: String
    LicenseArn: Arn
    Principals: PrincipalArnList


class CreateGrantResponse(BaseModel):
    GrantArn: Optional[Arn] = None
    Status: Optional[GrantStatus] = None
    Version: Optional[String] = None


class CreateGrantVersionRequest(BaseModel):
    AllowedOperations: Optional[AllowedOperationList] = None
    ClientToken_1: ClientToken = Field(..., alias='ClientToken')
    GrantArn: Arn
    GrantName: Optional[String] = None
    Options_1: Optional[Options] = Field(None, alias='Options')
    SourceVersion: Optional[String] = None
    Status: Optional[GrantStatus] = None
    StatusReason: Optional[StatusReasonMessage] = None


class CreateGrantVersionResponse(BaseModel):
    GrantArn: Optional[Arn] = None
    Status: Optional[GrantStatus] = None
    Version: Optional[String] = None


class CreateLicenseConfigurationResponse(BaseModel):
    LicenseConfigurationArn: Optional[String] = None


class CreateLicenseConversionTaskForResourceResponse(BaseModel):
    LicenseConversionTaskId_1: Optional[LicenseConversionTaskId] = Field(
        None, alias='LicenseConversionTaskId'
    )


class CreateLicenseManagerReportGeneratorResponse(BaseModel):
    LicenseManagerReportGeneratorArn: Optional[String] = None


class CreateLicenseResponse(BaseModel):
    LicenseArn: Optional[Arn] = None
    Status: Optional[LicenseStatus] = None
    Version: Optional[String] = None


class CreateLicenseVersionResponse(BaseModel):
    LicenseArn: Optional[Arn] = None
    Status: Optional[LicenseStatus] = None
    Version: Optional[String] = None


class CreateTokenResponse(BaseModel):
    Token: Optional[TokenString] = None
    TokenId: Optional[String] = None
    TokenType_1: Optional[TokenType] = Field(None, alias='TokenType')


class DatetimeRange(BaseModel):
    Begin: ISO8601DateTime
    End: Optional[ISO8601DateTime] = None


class DeleteGrantRequest(BaseModel):
    GrantArn: Arn
    StatusReason: Optional[StatusReasonMessage] = None
    Version: String


class DeleteGrantResponse(BaseModel):
    GrantArn: Optional[Arn] = None
    Status: Optional[GrantStatus] = None
    Version: Optional[String] = None


class DeleteLicenseConfigurationRequest(BaseModel):
    LicenseConfigurationArn: String


class DeleteLicenseManagerReportGeneratorRequest(BaseModel):
    LicenseManagerReportGeneratorArn: String


class DeleteLicenseRequest(BaseModel):
    LicenseArn: Arn
    SourceVersion: String


class DeleteLicenseResponse(BaseModel):
    DeletionDate: Optional[ISO8601DateTime] = None
    Status: Optional[LicenseDeletionStatus] = None


class DeleteTokenRequest(BaseModel):
    TokenId: String


class Entitlement(BaseModel):
    AllowCheckIn: Optional[BoxBoolean] = None
    MaxCount: Optional[Long] = None
    Name: String
    Overage: Optional[BoxBoolean] = None
    Unit: EntitlementUnit
    Value: Optional[String] = None


class EntitlementData(BaseModel):
    Name: String
    Unit: EntitlementDataUnit
    Value: Optional[String] = None


class EntitlementDataList(RootModel[List[EntitlementData]]):
    root: List[EntitlementData]


class EntitlementList(RootModel[List[Entitlement]]):
    root: List[Entitlement]


class EntitlementUsage(BaseModel):
    ConsumedValue: String
    MaxCount: Optional[String] = None
    Name: String
    Unit: EntitlementDataUnit


class EntitlementUsageList(RootModel[List[EntitlementUsage]]):
    root: List[EntitlementUsage]


class ExtendLicenseConsumptionRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    LicenseConsumptionToken: String


class ExtendLicenseConsumptionResponse(BaseModel):
    Expiration: Optional[ISO8601DateTime] = None
    LicenseConsumptionToken: Optional[String] = None


class Filter(BaseModel):
    Name: Optional[FilterName] = None
    Values: Optional[FilterValues] = None


class FilterList(RootModel[List[Filter]]):
    root: List[Filter]


class Filters(RootModel[List[Filter]]):
    root: List[Filter]


class GetAccessTokenResponse(BaseModel):
    AccessToken: Optional[TokenString] = None


class GetGrantRequest(BaseModel):
    GrantArn: Arn
    Version: Optional[String] = None


class GetLicenseConfigurationRequest(BaseModel):
    LicenseConfigurationArn: String


class GetLicenseConversionTaskRequest(BaseModel):
    LicenseConversionTaskId_1: LicenseConversionTaskId = Field(
        ..., alias='LicenseConversionTaskId'
    )


class GetLicenseManagerReportGeneratorRequest(BaseModel):
    LicenseManagerReportGeneratorArn: String


class GetLicenseRequest(BaseModel):
    LicenseArn: Arn
    Version: Optional[String] = None


class GetServiceSettingsResponse(BaseModel):
    EnableCrossAccountsDiscovery: Optional[BoxBoolean] = None
    LicenseManagerResourceShareArn: Optional[String] = None
    OrganizationConfiguration_1: Optional[OrganizationConfiguration] = Field(
        None, alias='OrganizationConfiguration'
    )
    S3BucketArn: Optional[String] = None
    SnsTopicArn: Optional[String] = None


class Grant(BaseModel):
    GrantArn: Arn
    GrantName: String
    GrantStatus_1: GrantStatus = Field(..., alias='GrantStatus')
    GrantedOperations: AllowedOperationList
    GranteePrincipalArn: Arn
    HomeRegion: String
    LicenseArn: Arn
    Options_1: Optional[Options] = Field(None, alias='Options')
    ParentArn: Arn
    StatusReason: Optional[StatusReasonMessage] = None
    Version: String


class GrantList(RootModel[List[Grant]]):
    root: List[Grant]


class InventoryFilter(BaseModel):
    Condition: InventoryFilterCondition
    Name: String
    Value: Optional[String] = None


class InventoryFilterList(RootModel[List[InventoryFilter]]):
    root: List[InventoryFilter]


class Issuer(BaseModel):
    Name: String
    SignKey: Optional[String] = None


class IssuerDetails(BaseModel):
    KeyFingerprint: Optional[String] = None
    Name: Optional[String] = None
    SignKey: Optional[String] = None


class LicenseConfigurationAssociation(BaseModel):
    AmiAssociationScope: Optional[String] = None
    AssociationTime: Optional[DateTime] = None
    ResourceArn: Optional[String] = None
    ResourceOwnerId: Optional[String] = None
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')


class LicenseConfigurationAssociations(
    RootModel[List[LicenseConfigurationAssociation]]
):
    root: List[LicenseConfigurationAssociation]


class LicenseConfigurationUsage(BaseModel):
    AssociationTime: Optional[DateTime] = None
    ConsumedLicenses: Optional[BoxLong] = None
    ResourceArn: Optional[String] = None
    ResourceOwnerId: Optional[String] = None
    ResourceStatus: Optional[String] = None
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')


class LicenseConfigurationUsageList(RootModel[List[LicenseConfigurationUsage]]):
    root: List[LicenseConfigurationUsage]


class LicenseConversionContext(BaseModel):
    UsageOperation_1: Optional[UsageOperation] = Field(None, alias='UsageOperation')


class LicenseConversionTask(BaseModel):
    DestinationLicenseContext: Optional[LicenseConversionContext] = None
    EndTime: Optional[DateTime] = None
    LicenseConversionTaskId_1: Optional[LicenseConversionTaskId] = Field(
        None, alias='LicenseConversionTaskId'
    )
    LicenseConversionTime: Optional[DateTime] = None
    ResourceArn: Optional[String] = None
    SourceLicenseContext: Optional[LicenseConversionContext] = None
    StartTime: Optional[DateTime] = None
    Status: Optional[LicenseConversionTaskStatus] = None
    StatusMessage: Optional[String] = None


class LicenseConversionTasks(RootModel[List[LicenseConversionTask]]):
    root: List[LicenseConversionTask]


class LicenseSpecification(BaseModel):
    AmiAssociationScope: Optional[String] = None
    LicenseConfigurationArn: String


class LicenseSpecifications(RootModel[List[LicenseSpecification]]):
    root: List[LicenseSpecification]


class LicenseUsage(BaseModel):
    EntitlementUsages: Optional[EntitlementUsageList] = None


class ListAssociationsForLicenseConfigurationRequest(BaseModel):
    LicenseConfigurationArn: String
    MaxResults: Optional[BoxInteger] = None
    NextToken: Optional[String] = None


class ListAssociationsForLicenseConfigurationResponse(BaseModel):
    LicenseConfigurationAssociations_1: Optional[LicenseConfigurationAssociations] = (
        Field(None, alias='LicenseConfigurationAssociations')
    )
    NextToken: Optional[String] = None


class ListDistributedGrantsRequest(BaseModel):
    Filters: Optional[FilterList] = None
    GrantArns: Optional[ArnList] = None
    MaxResults: Optional[MaxSize100] = None
    NextToken: Optional[String] = None


class ListDistributedGrantsResponse(BaseModel):
    Grants: Optional[GrantList] = None
    NextToken: Optional[String] = None


class ListFailuresForLicenseConfigurationOperationsRequest(BaseModel):
    LicenseConfigurationArn: String
    MaxResults: Optional[BoxInteger] = None
    NextToken: Optional[String] = None


class ListLicenseConfigurationsRequest(BaseModel):
    Filters_1: Optional[Filters] = Field(None, alias='Filters')
    LicenseConfigurationArns: Optional[StringList] = None
    MaxResults: Optional[BoxInteger] = None
    NextToken: Optional[String] = None


class ListLicenseConversionTasksRequest(BaseModel):
    Filters_1: Optional[Filters] = Field(None, alias='Filters')
    MaxResults: Optional[BoxInteger] = None
    NextToken: Optional[String] = None


class ListLicenseConversionTasksResponse(BaseModel):
    LicenseConversionTasks_1: Optional[LicenseConversionTasks] = Field(
        None, alias='LicenseConversionTasks'
    )
    NextToken: Optional[String] = None


class ListLicenseManagerReportGeneratorsRequest(BaseModel):
    Filters: Optional[FilterList] = None
    MaxResults: Optional[MaxSize100] = None
    NextToken: Optional[String] = None


class ListLicenseSpecificationsForResourceRequest(BaseModel):
    MaxResults: Optional[BoxInteger] = None
    NextToken: Optional[String] = None
    ResourceArn: String


class ListLicenseSpecificationsForResourceResponse(BaseModel):
    LicenseSpecifications_1: Optional[LicenseSpecifications] = Field(
        None, alias='LicenseSpecifications'
    )
    NextToken: Optional[String] = None


class ListLicenseVersionsRequest(BaseModel):
    LicenseArn: Arn
    MaxResults: Optional[MaxSize100] = None
    NextToken: Optional[String] = None


class ListLicensesRequest(BaseModel):
    Filters: Optional[FilterList] = None
    LicenseArns: Optional[ArnList] = None
    MaxResults: Optional[MaxSize100] = None
    NextToken: Optional[String] = None


class ListReceivedGrantsForOrganizationRequest(BaseModel):
    Filters: Optional[FilterList] = None
    LicenseArn: Arn
    MaxResults: Optional[MaxSize100] = None
    NextToken: Optional[String] = None


class ListReceivedGrantsForOrganizationResponse(BaseModel):
    Grants: Optional[GrantList] = None
    NextToken: Optional[String] = None


class ListReceivedGrantsRequest(BaseModel):
    Filters: Optional[FilterList] = None
    GrantArns: Optional[ArnList] = None
    MaxResults: Optional[MaxSize100] = None
    NextToken: Optional[String] = None


class ListReceivedGrantsResponse(BaseModel):
    Grants: Optional[GrantList] = None
    NextToken: Optional[String] = None


class ListReceivedLicensesForOrganizationRequest(BaseModel):
    Filters: Optional[FilterList] = None
    MaxResults: Optional[MaxSize100] = None
    NextToken: Optional[String] = None


class ListReceivedLicensesRequest(BaseModel):
    Filters: Optional[FilterList] = None
    LicenseArns: Optional[ArnList] = None
    MaxResults: Optional[MaxSize100] = None
    NextToken: Optional[String] = None


class ListResourceInventoryRequest(BaseModel):
    Filters: Optional[InventoryFilterList] = None
    MaxResults: Optional[BoxInteger] = None
    NextToken: Optional[String] = None


class ListTagsForResourceRequest(BaseModel):
    ResourceArn: String


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagList] = None


class ListTokensRequest(BaseModel):
    Filters: Optional[FilterList] = None
    MaxResults: Optional[MaxSize100] = None
    NextToken: Optional[String] = None
    TokenIds: Optional[StringList] = None


class ListUsageForLicenseConfigurationRequest(BaseModel):
    Filters_1: Optional[Filters] = Field(None, alias='Filters')
    LicenseConfigurationArn: String
    MaxResults: Optional[BoxInteger] = None
    NextToken: Optional[String] = None


class ListUsageForLicenseConfigurationResponse(BaseModel):
    LicenseConfigurationUsageList_1: Optional[LicenseConfigurationUsageList] = Field(
        None, alias='LicenseConfigurationUsageList'
    )
    NextToken: Optional[String] = None


class ManagedResourceSummary(BaseModel):
    AssociationCount: Optional[BoxLong] = None
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')


class ManagedResourceSummaryList(RootModel[List[ManagedResourceSummary]]):
    root: List[ManagedResourceSummary]


class MaxSize3StringList(RootModel[List[String]]):
    root: List[String] = Field(..., max_length=3)


class Metadata(BaseModel):
    Name: Optional[String] = None
    Value: Optional[String] = None


class MetadataList(RootModel[List[Metadata]]):
    root: List[Metadata]


class ProductInformationFilter(BaseModel):
    ProductInformationFilterComparator: String
    ProductInformationFilterName: String
    ProductInformationFilterValue: Optional[StringList] = None


class ProductInformationFilterList(RootModel[List[ProductInformationFilter]]):
    root: List[ProductInformationFilter]


class ReceivedMetadata(BaseModel):
    AllowedOperations: Optional[AllowedOperationList] = None
    ReceivedStatus_1: Optional[ReceivedStatus] = Field(None, alias='ReceivedStatus')
    ReceivedStatusReason: Optional[StatusReasonMessage] = None


class RejectGrantResponse(BaseModel):
    GrantArn: Optional[Arn] = None
    Status: Optional[GrantStatus] = None
    Version: Optional[String] = None


class ReportFrequency(BaseModel):
    period: Optional[ReportFrequencyType] = None
    value: Optional[Integer] = None


class ResourceInventory(BaseModel):
    Platform: Optional[String] = None
    PlatformVersion: Optional[String] = None
    ResourceArn: Optional[String] = None
    ResourceId: Optional[String] = None
    ResourceOwningAccountId: Optional[String] = None
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')


class ResourceInventoryList(RootModel[List[ResourceInventory]]):
    root: List[ResourceInventory]


class S3Location(BaseModel):
    bucket: Optional[String] = None
    keyPrefix: Optional[String] = None


class TokenData(BaseModel):
    ExpirationTime: Optional[ISO8601DateTime] = None
    LicenseArn: Optional[String] = None
    RoleArns: Optional[ArnList] = None
    Status: Optional[String] = None
    TokenId: Optional[String] = None
    TokenProperties: Optional[MaxSize3StringList] = None
    TokenType: Optional[String] = None


class TokenList(RootModel[List[TokenData]]):
    root: List[TokenData]


class UpdateLicenseManagerReportGeneratorRequest(BaseModel):
    ClientToken: ClientRequestToken
    Description: Optional[String] = None
    LicenseManagerReportGeneratorArn: String
    ReportContext_1: ReportContext = Field(..., alias='ReportContext')
    ReportFrequency_1: ReportFrequency = Field(..., alias='ReportFrequency')
    ReportGeneratorName_1: ReportGeneratorName = Field(..., alias='ReportGeneratorName')
    Type: ReportTypeList


class UpdateLicenseSpecificationsForResourceRequest(BaseModel):
    AddLicenseSpecifications: Optional[LicenseSpecifications] = None
    RemoveLicenseSpecifications: Optional[LicenseSpecifications] = None
    ResourceArn: String


class CheckoutBorrowLicenseRequest(BaseModel):
    CheckoutMetadata: Optional[MetadataList] = None
    ClientToken_1: ClientToken = Field(..., alias='ClientToken')
    DigitalSignatureMethod_1: DigitalSignatureMethod = Field(
        ..., alias='DigitalSignatureMethod'
    )
    Entitlements: EntitlementDataList
    LicenseArn: Arn
    NodeId: Optional[String] = None


class CheckoutBorrowLicenseResponse(BaseModel):
    CheckoutMetadata: Optional[MetadataList] = None
    EntitlementsAllowed: Optional[EntitlementDataList] = None
    Expiration: Optional[ISO8601DateTime] = None
    IssuedAt: Optional[ISO8601DateTime] = None
    LicenseArn: Optional[Arn] = None
    LicenseConsumptionToken: Optional[String] = None
    NodeId: Optional[String] = None
    SignedToken_1: Optional[SignedToken] = Field(None, alias='SignedToken')


class CheckoutLicenseRequest(BaseModel):
    Beneficiary: Optional[String] = None
    CheckoutType_1: CheckoutType = Field(..., alias='CheckoutType')
    ClientToken_1: ClientToken = Field(..., alias='ClientToken')
    Entitlements: EntitlementDataList
    KeyFingerprint: String
    NodeId: Optional[String] = None
    ProductSKU: String


class CheckoutLicenseResponse(BaseModel):
    CheckoutType_1: Optional[CheckoutType] = Field(None, alias='CheckoutType')
    EntitlementsAllowed: Optional[EntitlementDataList] = None
    Expiration: Optional[ISO8601DateTime] = None
    IssuedAt: Optional[ISO8601DateTime] = None
    LicenseArn: Optional[String] = None
    LicenseConsumptionToken: Optional[String] = None
    NodeId: Optional[String] = None
    SignedToken_1: Optional[SignedToken] = Field(None, alias='SignedToken')


class CreateLicenseConversionTaskForResourceRequest(BaseModel):
    DestinationLicenseContext: LicenseConversionContext
    ResourceArn: Arn
    SourceLicenseContext: LicenseConversionContext


class CreateLicenseManagerReportGeneratorRequest(BaseModel):
    ClientToken: ClientRequestToken
    Description: Optional[String] = None
    ReportContext_1: ReportContext = Field(..., alias='ReportContext')
    ReportFrequency_1: ReportFrequency = Field(..., alias='ReportFrequency')
    ReportGeneratorName_1: ReportGeneratorName = Field(..., alias='ReportGeneratorName')
    Tags: Optional[TagList] = None
    Type: ReportTypeList


class CreateLicenseRequest(BaseModel):
    Beneficiary: String
    ClientToken_1: ClientToken = Field(..., alias='ClientToken')
    ConsumptionConfiguration_1: ConsumptionConfiguration = Field(
        ..., alias='ConsumptionConfiguration'
    )
    Entitlements: EntitlementList
    HomeRegion: String
    Issuer_1: Issuer = Field(..., alias='Issuer')
    LicenseMetadata: Optional[MetadataList] = None
    LicenseName: String
    ProductName: String
    ProductSKU: String
    Validity: DatetimeRange


class CreateLicenseVersionRequest(BaseModel):
    ClientToken_1: ClientToken = Field(..., alias='ClientToken')
    ConsumptionConfiguration_1: ConsumptionConfiguration = Field(
        ..., alias='ConsumptionConfiguration'
    )
    Entitlements: EntitlementList
    HomeRegion: String
    Issuer_1: Issuer = Field(..., alias='Issuer')
    LicenseArn: Arn
    LicenseMetadata: Optional[MetadataList] = None
    LicenseName: String
    ProductName: String
    SourceVersion: Optional[String] = None
    Status: LicenseStatus
    Validity: DatetimeRange


class CreateTokenRequest(BaseModel):
    ClientToken_1: ClientToken = Field(..., alias='ClientToken')
    ExpirationInDays: Optional[Integer] = None
    LicenseArn: Arn
    RoleArns: Optional[ArnList] = None
    TokenProperties: Optional[MaxSize3StringList] = None


class GetAccessTokenRequest(BaseModel):
    Token: TokenString
    TokenProperties: Optional[MaxSize3StringList] = None


class GetGrantResponse(BaseModel):
    Grant_1: Optional[Grant] = Field(None, alias='Grant')


class GetLicenseConversionTaskResponse(BaseModel):
    DestinationLicenseContext: Optional[LicenseConversionContext] = None
    EndTime: Optional[DateTime] = None
    LicenseConversionTaskId_1: Optional[LicenseConversionTaskId] = Field(
        None, alias='LicenseConversionTaskId'
    )
    LicenseConversionTime: Optional[DateTime] = None
    ResourceArn: Optional[String] = None
    SourceLicenseContext: Optional[LicenseConversionContext] = None
    StartTime: Optional[DateTime] = None
    Status: Optional[LicenseConversionTaskStatus] = None
    StatusMessage: Optional[String] = None


class GetLicenseUsageResponse(BaseModel):
    LicenseUsage_1: Optional[LicenseUsage] = Field(None, alias='LicenseUsage')


class GrantedLicense(BaseModel):
    Beneficiary: Optional[String] = None
    ConsumptionConfiguration_1: Optional[ConsumptionConfiguration] = Field(
        None, alias='ConsumptionConfiguration'
    )
    CreateTime: Optional[ISO8601DateTime] = None
    Entitlements: Optional[EntitlementList] = None
    HomeRegion: Optional[String] = None
    Issuer: Optional[IssuerDetails] = None
    LicenseArn: Optional[Arn] = None
    LicenseMetadata: Optional[MetadataList] = None
    LicenseName: Optional[String] = None
    ProductName: Optional[String] = None
    ProductSKU: Optional[String] = None
    ReceivedMetadata_1: Optional[ReceivedMetadata] = Field(
        None, alias='ReceivedMetadata'
    )
    Status: Optional[LicenseStatus] = None
    Validity: Optional[DatetimeRange] = None
    Version: Optional[String] = None


class GrantedLicenseList(RootModel[List[GrantedLicense]]):
    root: List[GrantedLicense]


class License(BaseModel):
    Beneficiary: Optional[String] = None
    ConsumptionConfiguration_1: Optional[ConsumptionConfiguration] = Field(
        None, alias='ConsumptionConfiguration'
    )
    CreateTime: Optional[ISO8601DateTime] = None
    Entitlements: Optional[EntitlementList] = None
    HomeRegion: Optional[String] = None
    Issuer: Optional[IssuerDetails] = None
    LicenseArn: Optional[Arn] = None
    LicenseMetadata: Optional[MetadataList] = None
    LicenseName: Optional[String] = None
    ProductName: Optional[String] = None
    ProductSKU: Optional[String] = None
    Status: Optional[LicenseStatus] = None
    Validity: Optional[DatetimeRange] = None
    Version: Optional[String] = None


class LicenseList(RootModel[List[License]]):
    root: List[License]


class LicenseOperationFailure(BaseModel):
    ErrorMessage: Optional[String] = None
    FailureTime: Optional[DateTime] = None
    MetadataList_1: Optional[MetadataList] = Field(None, alias='MetadataList')
    OperationName: Optional[String] = None
    OperationRequestedBy: Optional[String] = None
    ResourceArn: Optional[String] = None
    ResourceOwnerId: Optional[String] = None
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')


class LicenseOperationFailureList(RootModel[List[LicenseOperationFailure]]):
    root: List[LicenseOperationFailure]


class ListFailuresForLicenseConfigurationOperationsResponse(BaseModel):
    LicenseOperationFailureList_1: Optional[LicenseOperationFailureList] = Field(
        None, alias='LicenseOperationFailureList'
    )
    NextToken: Optional[String] = None


class ListLicenseVersionsResponse(BaseModel):
    Licenses: Optional[LicenseList] = None
    NextToken: Optional[String] = None


class ListLicensesResponse(BaseModel):
    Licenses: Optional[LicenseList] = None
    NextToken: Optional[String] = None


class ListReceivedLicensesForOrganizationResponse(BaseModel):
    Licenses: Optional[GrantedLicenseList] = None
    NextToken: Optional[String] = None


class ListReceivedLicensesResponse(BaseModel):
    Licenses: Optional[GrantedLicenseList] = None
    NextToken: Optional[String] = None


class ListResourceInventoryResponse(BaseModel):
    NextToken: Optional[String] = None
    ResourceInventoryList_1: Optional[ResourceInventoryList] = Field(
        None, alias='ResourceInventoryList'
    )


class ListTokensResponse(BaseModel):
    NextToken: Optional[String] = None
    Tokens: Optional[TokenList] = None


class ProductInformation(BaseModel):
    ProductInformationFilterList_1: ProductInformationFilterList = Field(
        ..., alias='ProductInformationFilterList'
    )
    ResourceType: String


class ProductInformationList(RootModel[List[ProductInformation]]):
    root: List[ProductInformation]


class ReportGenerator(BaseModel):
    CreateTime: Optional[String] = None
    Description: Optional[String] = None
    LastReportGenerationTime: Optional[String] = None
    LastRunFailureReason: Optional[String] = None
    LastRunStatus: Optional[String] = None
    LicenseManagerReportGeneratorArn: Optional[String] = None
    ReportContext_1: Optional[ReportContext] = Field(None, alias='ReportContext')
    ReportCreatorAccount: Optional[String] = None
    ReportFrequency_1: Optional[ReportFrequency] = Field(None, alias='ReportFrequency')
    ReportGeneratorName: Optional[String] = None
    ReportType: Optional[ReportTypeList] = None
    S3Location_1: Optional[S3Location] = Field(None, alias='S3Location')
    Tags: Optional[TagList] = None


class ReportGeneratorList(RootModel[List[ReportGenerator]]):
    root: List[ReportGenerator]


class UpdateLicenseConfigurationRequest(BaseModel):
    Description: Optional[String] = None
    DisassociateWhenNotFound: Optional[BoxBoolean] = None
    LicenseConfigurationArn: String
    LicenseConfigurationStatus_1: Optional[LicenseConfigurationStatus] = Field(
        None, alias='LicenseConfigurationStatus'
    )
    LicenseCount: Optional[BoxLong] = None
    LicenseCountHardLimit: Optional[BoxBoolean] = None
    LicenseRules: Optional[StringList] = None
    Name: Optional[String] = None
    ProductInformationList_1: Optional[ProductInformationList] = Field(
        None, alias='ProductInformationList'
    )


class CreateLicenseConfigurationRequest(BaseModel):
    Description: Optional[String] = None
    DisassociateWhenNotFound: Optional[BoxBoolean] = None
    LicenseCount: Optional[BoxLong] = None
    LicenseCountHardLimit: Optional[BoxBoolean] = None
    LicenseCountingType_1: LicenseCountingType = Field(..., alias='LicenseCountingType')
    LicenseRules: Optional[StringList] = None
    Name: String
    ProductInformationList_1: Optional[ProductInformationList] = Field(
        None, alias='ProductInformationList'
    )
    Tags: Optional[TagList] = None


class GetLicenseConfigurationResponse(BaseModel):
    AutomatedDiscoveryInformation_1: Optional[AutomatedDiscoveryInformation] = Field(
        None, alias='AutomatedDiscoveryInformation'
    )
    ConsumedLicenseSummaryList_1: Optional[ConsumedLicenseSummaryList] = Field(
        None, alias='ConsumedLicenseSummaryList'
    )
    ConsumedLicenses: Optional[BoxLong] = None
    Description: Optional[String] = None
    DisassociateWhenNotFound: Optional[BoxBoolean] = None
    LicenseConfigurationArn: Optional[String] = None
    LicenseConfigurationId: Optional[String] = None
    LicenseCount: Optional[BoxLong] = None
    LicenseCountHardLimit: Optional[BoxBoolean] = None
    LicenseCountingType_1: Optional[LicenseCountingType] = Field(
        None, alias='LicenseCountingType'
    )
    LicenseRules: Optional[StringList] = None
    ManagedResourceSummaryList_1: Optional[ManagedResourceSummaryList] = Field(
        None, alias='ManagedResourceSummaryList'
    )
    Name: Optional[String] = None
    OwnerAccountId: Optional[String] = None
    ProductInformationList_1: Optional[ProductInformationList] = Field(
        None, alias='ProductInformationList'
    )
    Status: Optional[String] = None
    Tags: Optional[TagList] = None


class GetLicenseManagerReportGeneratorResponse(BaseModel):
    ReportGenerator_1: Optional[ReportGenerator] = Field(None, alias='ReportGenerator')


class GetLicenseResponse(BaseModel):
    License_1: Optional[License] = Field(None, alias='License')


class LicenseConfiguration(BaseModel):
    AutomatedDiscoveryInformation_1: Optional[AutomatedDiscoveryInformation] = Field(
        None, alias='AutomatedDiscoveryInformation'
    )
    ConsumedLicenseSummaryList_1: Optional[ConsumedLicenseSummaryList] = Field(
        None, alias='ConsumedLicenseSummaryList'
    )
    ConsumedLicenses: Optional[BoxLong] = None
    Description: Optional[String] = None
    DisassociateWhenNotFound: Optional[BoxBoolean] = None
    LicenseConfigurationArn: Optional[String] = None
    LicenseConfigurationId: Optional[String] = None
    LicenseCount: Optional[BoxLong] = None
    LicenseCountHardLimit: Optional[BoxBoolean] = None
    LicenseCountingType_1: Optional[LicenseCountingType] = Field(
        None, alias='LicenseCountingType'
    )
    LicenseRules: Optional[StringList] = None
    ManagedResourceSummaryList_1: Optional[ManagedResourceSummaryList] = Field(
        None, alias='ManagedResourceSummaryList'
    )
    Name: Optional[String] = None
    OwnerAccountId: Optional[String] = None
    ProductInformationList_1: Optional[ProductInformationList] = Field(
        None, alias='ProductInformationList'
    )
    Status: Optional[String] = None


class LicenseConfigurations(RootModel[List[LicenseConfiguration]]):
    root: List[LicenseConfiguration]


class ListLicenseConfigurationsResponse(BaseModel):
    LicenseConfigurations_1: Optional[LicenseConfigurations] = Field(
        None, alias='LicenseConfigurations'
    )
    NextToken: Optional[String] = None


class ListLicenseManagerReportGeneratorsResponse(BaseModel):
    NextToken: Optional[String] = None
    ReportGenerators: Optional[ReportGeneratorList] = None
